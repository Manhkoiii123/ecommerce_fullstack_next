// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  USER
  ADMIN
  SELLER
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  picture   String   @db.Text
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stores    Store[]  @relation("UserStores")
}

model Category {
  id            String        @id @default(uuid())
  name          String
  image         String
  url           String        @unique
  featured      Boolean       @default(false)
  subCategories SubCategory[] @relation("CategoryToSubCategory")
  products      Product[]     @relation("CategoryToProduct")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model SubCategory {
  id         String    @id @default(uuid())
  name       String
  image      String
  url        String    @unique
  featured   Boolean   @default(false)
  categoryId String
  category   Category  @relation("CategoryToSubCategory", fields: [categoryId], references: [id],onDelete: Cascade)
  products   Product[] @relation("SubCategoryToProduct")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([categoryId])
}

enum StoreStatus {
  PENDING
  BANNED
  DISABLED
  ACTIVE
}

model Store {
  id                     String      @id @default(uuid())
  name                   String
  description            String      @db.Text
  email                  String      @unique
  phone                  String
  url                    String      @unique
  logo                   String
  cover                  String
  status                 StoreStatus @default(PENDING)
  averageRating          Float       @default(0)
  featured               Boolean     @default(false)
  returnPolicy           String?
  defaultShippingService String?
  defaultShippingFees    Float?
  defaultDeliveryTimeMin Int?
  defaultDeliveryTimeMax Int?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @default(now()) @updatedAt

  userId String
  user   User   @relation("UserStores", fields: [userId], references: [id],onDelete: Cascade)

  products Product[] @relation("StoreToProducts")

  @@index([userId])
}

model Product {
  id          String @id @default(uuid())
  name        String
  description String @db.LongText
  slug        String @unique
  brand       String
  rating      Float? @default(0)

  variants ProductVariant[] @relation("ProductToProductVariant")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  storeId   String
  store     Store    @relation("StoreToProducts", fields: [storeId], references: [id],onDelete: Cascade)

  categoryId String
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id],onDelete: Cascade)

  subCategoryId String
  subCategory   SubCategory @relation("SubCategoryToProduct", fields: [subCategoryId], references: [id],onDelete: Cascade)

  @@index([storeId])
  @@index([categoryId])
  @@index([subCategoryId])
}

model ProductVariant {
  id                 String                @id @default(uuid())
  variantName        String
  variantImage        String?
  variantDescription String?               @db.LongText
  slug               String                @unique
  isSale             Boolean               @default(false)
  sku                String
  keywords           String
  productId          String
  product            Product               @relation("ProductToProductVariant", fields: [productId], references: [id],onDelete: Cascade)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @default(now()) @updatedAt
  sizes              Size[]                @relation("ProductVariantSizes")
  images             ProductVariantImage[] @relation("ProductVariantToVariantImage")
  colors             Color[]               @relation("ProductVariantColors")

  @@index([productId])
}

model Size {
  id       String @id @default(uuid())
  size     String
  quantity Int
  price    Float
  discount Float  @default(0)

  productVariantId String
  productVariant   ProductVariant @relation("ProductVariantSizes", fields: [productVariantId], references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productVariantId])
}

model ProductVariantImage {
  id  String @id @default(uuid())
  url String
  alt String @default("")

  productVariantId String
  productVariant   ProductVariant @relation("ProductVariantToVariantImage", fields: [productVariantId], references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productVariantId])
}

model Color {
  id   String @id @default(uuid())
  name String

  productVariantId String
  productVariant   ProductVariant @relation("ProductVariantColors", fields: [productVariantId], references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productVariantId])
}
